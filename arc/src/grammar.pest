WHITESPACE        = _{ " " | "\n" | "\r" }
COMMENT           = _{ SingleLineComment | MultiLineComment }
SingleLineComment = @{ "//" ~ (!"\n" ~ ANY)* }
MultiLineComment  = @{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

IDENT_CHARS =  { ASCII_ALPHANUMERIC | "_" }
IDENTIFIER  = @{ !(KEYWORD ~ !ASCII_ALPHANUMERIC) ~ (ASCII_ALPHA ~ IDENT_CHARS* | ("_" ~ IDENT_CHARS+)) }
KEYWORD     =  {
    a_fx
  | a_let
  | a_mut
  | a_as
  | a_import
  | a_pub
  | a_mod
  | a_super
  | a_self
  | a_if
  | a_else
  | a_while
  | a_for
  | a_in
  | a_continue
  | a_break
  | a_match
  | a_impl
  | a_struct
  | a_enum
  | a_return
  | a_result
  | a_ok
  | a_err
  | a_type
}

a_fx        = _{ "fx" }
a_tilde     = _{ "~" }
a_let       = _{ "let" }
a_mut       = _{ "mut" }
a_import    = _{ "import" }
a_pub       =  { "pub" }
a_mod       = _{ "mod" }
a_super     =  { "super" }
a_self      =  { "self" }
a_if        = _{ "if" }
a_else      = _{ "else" }
a_while     = _{ "while" }
a_for       =  { "for" }
a_in        =  { "in" }
a_continue  = _{ "continue" }
a_break     = _{ "break" }
a_match     = _{ "match" }
a_fat_arrow =  { "=>" }
a_return    = _{ "return" }
a_result    =  { "result" }
a_ok        =  { "ok" }
a_err       =  { "err" }
a_type      =  { "type" }
a_as        =  { "as" }
a_struct    = _{ "struct" }
a_enum      = _{ "enum" }
a_impl      = _{ "impl" }

INTEGER = @{ ("-" | "0b" | "0o" | "0x")? ~ ("_")? ~ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }
FLOAT   = @{ INTEGER ~ "." ~ ASCII_DIGIT* }
BOOL    = @{ "true" | "false" }

STRING = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\"" }
CHAR   = @{ "'" ~ ANY ~ "'" }
// CHAR = @{"'" ~ (!("'") ~ ASCII_ALPHA) ~ "'" }

TUPLE = { "(" ~ (EXPRESSION ~ ("," ~ EXPRESSION)*)? ~ ")" }
ARRAY = { "[" ~ (EXPRESSION ~ ("," ~ EXPRESSION)*)? ~ "]" }
LIST  = { "<" ~ (EXPRESSION ~ ("," ~ EXPRESSION)*)? ~ ">" }

DATA_TYPES = { TUPLE | ARRAY | LIST | FLOAT | INTEGER | STRING | CHAR | BOOL | IDENTIFIER }

TYPE        = { TUPLE_TYPE | ARRAY_TYPE | LIST_TYPE | RESULT_TYPE | "i32" | "i64" | "f32" | "f64" | "char" | "bool" | "string" }
TUPLE_TYPE  = { "(" ~ (TYPE ~ ("," ~ TYPE)*)? ~ ")" }
ARRAY_TYPE  = { "[" ~ TYPE ~ ";" ~ INTEGER ~ "]" }
LIST_TYPE   = { "<" ~ TYPE ~ ">" }
RESULT_TYPE = { ("result<" | "Result<") ~ ANY_TYPE ~ "," ~ ANY_TYPE ~ ">" }

ANY_TYPE = @{ TYPE | IDENTIFIER }

OPERATOR = {
    OPERATOR_LEVEL_1
  | OPERATOR_LEVEL_2
  | OPERATOR_LEVEL_3
  | OPERATOR_LEVEL_4
  | OPERATOR_LEVEL_5
  | OPERATOR_LEVEL_6
  | OPERATOR_LEVEL_7
  | OPERATOR_LEVEL_8
  | OPERATOR_LEVEL_9
  | OPERATOR_LEVEL_10
}

OPERATOR_LEVEL_1  = { multiply | divide | remainder }
OPERATOR_LEVEL_2  = { add | subtract }
OPERATOR_LEVEL_3  = { bitwise_shift }
OPERATOR_LEVEL_4  = { bitwise_and }
OPERATOR_LEVEL_5  = { bitwise_xor }
OPERATOR_LEVEL_6  = { bitwise_or }
OPERATOR_LEVEL_7  = { logical_and }
OPERATOR_LEVEL_8  = { logical_or }
OPERATOR_LEVEL_9  = { comparison }
OPERATOR_LEVEL_10 = { ASSIGNMENT }

multiply           = { "*" }
divide             = { "/" }
remainder          = { "%" }
add                = { "+" }
subtract           = { "-" }
unary_plus         = { "++" }
unary_minus        = { "--" }
logical_and        = { "&&" }
logical_or         = { "||" }
logical_not        = { "!" }
comparison         = { equal | not_equal | greater_than_equal | less_than_equal | greater_than | less_than }
equal              = { "==" }
not_equal          = { "!=" }
greater_than_equal = { ">=" }
less_than_equal    = { "<=" }
greater_than       = { ">" }
less_than          = { "<" }

ASSIGNMENT                 = { assign | plus_assign | minus_assign | multiply_assign | divide_assign | remainder_assign | bitwise_and_assign | bitwise_or_assign | bitwise_xor_assign | bitwise_left_shift_assign | bitwise_right_shift_assign }
assign                     = { "=" }
plus_assign                = { "+=" }
minus_assign               = { "-=" }
multiply_assign            = { "*=" }
divide_assign              = { "/=" }
remainder_assign           = { "%=" }
bitwise_and_assign         = { "&=" }
bitwise_or_assign          = { "|=" }
bitwise_xor_assign         = { "^=" }
bitwise_left_shift_assign  = { "<<=" }
bitwise_right_shift_assign = { ">>=" }

bitwise_shift = { left_shift | right_shift }
bitwise_not   = { "!" }
bitwise_and   = { "&" }
bitwise_xor   = { "^" }
bitwise_or    = { "|" }
left_shift    = { "<<" }
right_shift   = { ">>" }

STATEMENT = {
    DECL_STMT
  | CALL_STMT
  | BREAK_STMT
  | CONTINUE_STMT
  | FLOW_CONTROL
}

SCOPE_START   = { "{" }
SCOPE_END     = { "}" }
STATEMENT_END = { ";" }

CALL_STMT      = { (FUNCTION_CALL | IMPL_ACCESS | MODULE_ACCESS) ~ STATEMENT_END }
DECL_STMT      = { MUT | IMMUT | VARIABLE_REASS }
MUT            = { a_let ~ a_mut ~ (IDENTIFIER | TUPLE_DESTRUCT) ~ TYPE? ~ ASSIGNMENT ~ RHS }
IMMUT          = { a_let ~ (IDENTIFIER | TUPLE_DESTRUCT) ~ TYPE? ~ ASSIGNMENT ~ RHS }
VARIABLE_REASS = { IDENTIFIER ~ ASSIGNMENT ~ RHS }

RHS = _{ (CLOSURE | FUNCTION_CALL | STRUCT_ASSIGN | MODULE_ACCESS | MATCH_STATEMENT | EXPRESSION | EXP_BLOCK) ~ STATEMENT_END }

BREAK_STMT    = { a_break ~ STATEMENT_END }
CONTINUE_STMT = { a_continue ~ STATEMENT_END }

FLOW_CONTROL = { IF_STATEMENT | MATCH_STATEMENT | FOR_LOOP | WHILE_LOOP }
// R_FLOW_CONTROL = { IF_STATEMENT | MATCH_STATEMENT }
FLOW_CONTROL_START = @{ SCOPE_START }
FLOW_CONTROL_END   = @{ SCOPE_END }

IF_STATEMENT      = { "if" ~ EXPRESSION ~ EXP_BLOCK ~ ELSE_IF_STATEMENT* ~ ELSE_BLOCK? }
ELSE_IF_STATEMENT = { "else" ~ "if" ~ EXPRESSION ~ EXP_BLOCK }
ELSE_BLOCK        = { "else" ~ EXP_BLOCK }

EXP_BLOCK = { FLOW_CONTROL_START ~ STATEMENT* ~ (EXPRESSION | RETURN_STMT)? ~ FLOW_CONTROL_END }
BLOCK     = { FLOW_CONTROL_START ~ STATEMENT* ~ (RETURN_STMT)? ~ FLOW_CONTROL_END }

MATCH_STATEMENT = { "match" ~ EXPRESSION ~ FLOW_CONTROL_START ~ MATCH_CASE* ~ MATCH_DEFAULT? ~ FLOW_CONTROL_END }
MATCH_CASE      = { EXPRESSION ~ a_fat_arrow ~ EXP_BLOCK ~ "," }
MATCH_DEFAULT   = { "_" ~ a_fat_arrow ~ EXP_BLOCK ~ "," }

FOR_LOOP = { "for" ~ IDENTIFIER ~ "in" ~ RANGE ~ BLOCK }
RANGE    = { EXPRESSION ~ ":" ~ EXPRESSION }
// RANGE = { DATA_TYPES ~ ":" ~ DATA_TYPES }

WHILE_LOOP = { "while" ~ EXPRESSION ~ BLOCK }

// EXPRESSION = { TERM ~ (("+" | "-") ~ TERM)* }
// TERM       = { FACTOR ~ (("*" | "/") ~ FACTOR)* }
EXPRESSION      = { EXPRESSION_TYPE ~ FACTOR ~ (OPERATOR ~ FACTOR)* }
FACTOR          = {
    (bitwise_not | subtract)? ~ (TUPLE_ACCESS | ARRAY_ACCESS | LIST_ACCESS | IMPL_ACCESS | MODULE_ACCESS | STRUCT_ACCESS | ENUM_ACCESS | FUNCTION_CALL | ERROR_CHECK | DATA_TYPES ~ (a_as ~ TYPE)? | ("(" ~ EXPRESSION ~ ")"))
}
EXPRESSION_TYPE = { "" }

// let some_struct = SomeStruct { field1: 1, field2: 2 };
STRUCT_ASSIGN       = { IDENTIFIER ~ "{" ~ STRUCT_FIELD_ASSIGN* ~ "}" }
STRUCT_FIELD_ASSIGN = { STRUCT_ENUM_IDENTIFIER ~ ":" ~ EXPRESSION ~ "," }

TUPLE_DESTRUCT = { "(" ~ (IDENTIFIER ~ ("," ~ IDENTIFIER)*)? ~ ")" }
TUPLE_ACCESS   = { IDENTIFIER ~ "." ~ INTEGER }
ARRAY_ACCESS   = { IDENTIFIER ~ "[" ~ (IDENTIFIER | INTEGER) ~ (":" ~ (IDENTIFIER | INTEGER))? ~ "]" }
LIST_ACCESS    = { IDENTIFIER ~ "[" ~ (IDENTIFIER | INTEGER) ~ (":" ~ (IDENTIFIER | INTEGER))? ~ "]" }
IMPL_ACCESS    = { IDENTIFIER ~ "." ~ IMPL_FUNCTION_CALL }
STRUCT_ACCESS  = { (IDENTIFIER | a_self) ~ "." ~ STRUCT_ENUM_IDENTIFIER }
ENUM_ACCESS    = { IDENTIFIER ~ "->" ~ STRUCT_ENUM_IDENTIFIER }
// STRUCT_ENUM_ACCESS = { (IDENTIFIER | a_self) ~ "." ~ STRUCT_ENUM_IDENTIFIER }

IMPL_FUNCTION_CALL     = @{ FUNCTION_CALL }
STRUCT_ENUM_IDENTIFIER = @{ IDENTIFIER }

FUNCTION_DECL  = { a_pub? ~ a_fx ~ IDENTIFIER ~ PARAMETER_LIST ~ RETURN_TYPE? ~ FUNCTION_BODY }
PARAMETER_LIST = { "(" ~ (PARAMETER ~ ("," ~ PARAMETER)*)* ~ ")" }
PARAMETER      = { (bitwise_and ~ a_self) | (IDENTIFIER ~ ANY_TYPE) }
RETURN_TYPE    = { a_tilde ~ TYPE }
RETURN_STMT    = { "return" ~ EXPRESSION ~ STATEMENT_END }
FUNCTION_BODY  = { SCOPE_START ~ STATEMENT* ~ RETURN_STMT? ~ SCOPE_END }

FUNCTION_CALL  = { (IDENTIFIER | a_err | a_ok) ~ ARGUMENTS_LIST }
ARGUMENTS_LIST = { "(" ~ (ARGUMENT ~ ("," ~ ARGUMENT)*)? ~ ")" }
ARGUMENT       = { bitwise_and? ~ EXPRESSION }

ERROR_CHECK = { a_let ~ (a_ok | a_err) ~ ARGUMENTS_LIST }

CLOSURE = { "fx" ~ ARGUMENTS_LIST ~ RETURN_TYPE? ~ EXP_BLOCK }

MODULE_DECL   =  { a_pub? ~ a_mod ~ IDENTIFIER ~ MODULE_BLOCK }
MODULE_BLOCK  = _{ SCOPE_START ~ PROGRAM_BLOCK* ~ SCOPE_END }
MODULE_ACCESS =  { IDENTIFIER ~ "::" ~ (FUNCTION_CALL | (IDENTIFIER ~ ("::" ~ IDENTIFIER)* ~ ("::" ~ FUNCTION_CALL)?)) }

IMPORT_DECL       =  { a_import ~ IMPORT_IDENTIFIER ~ ("::" ~ IMPORT_IDENTIFIER)* ~ ("::" ~ multiply)? ~ STATEMENT_END }
IMPORT_IDENTIFIER = _{ a_self | a_super | IDENTIFIER }

STRUCT_DECL  = { a_struct ~ IDENTIFIER ~ SCOPE_START ~ STRUCT_FIELD* ~ SCOPE_END }
STRUCT_FIELD = { IDENTIFIER ~ ANY_TYPE ~ "," }

ENUM_DECL    = { a_enum ~ IDENTIFIER ~ SCOPE_START ~ ENUM_VARIANT* ~ SCOPE_END }
ENUM_VARIANT = { IDENTIFIER ~ ("(" ~ ANY_TYPE ~ ")")? ~ "," }

IMPL_DECL = { a_impl ~ IDENTIFIER ~ SCOPE_START ~ FUNCTION_DECL* ~ SCOPE_END }
// IMPL_METHOD = { FUNCTION_DECL }

PROGRAM_BLOCK = { (IMPORT_DECL | MODULE_DECL | STRUCT_DECL | ENUM_DECL | IMPL_DECL | FUNCTION_DECL)* }
PROGRAM       = { SOI ~ NEWLINE* ~ PROGRAM_BLOCK ~ NEWLINE* ~ EOI }
